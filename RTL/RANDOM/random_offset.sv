//A list of 100 static random numbers to be used for initial log offsets.


module	random_offset	(	
//		--////////////////////	Clock Input	 	////////////////////	
					input logic CLK,

					//output	logic	[900:1]	start_offsetY,
					//output	logic	[900:1]	start_offsetX
					
					output	logic	[8:0]	start_offsetY [99:0],
					output	logic	[8:0]	start_offsetX [99:0]
					
					
);



//900 bits random
//logic offset_x = 900'b
//logic offset_y = 900'b

localparam NUM_OF_LOGS = 100;

//18 bits random
logic [NUM_OF_LOGS-1:0] [8:0]  offset_x  = {
9'b010000011
, 9'b011000111
, 9'b100000101
, 9'b100001100
, 9'b101101010
, 9'b111111001
, 9'b010111001
, 9'b011010000
, 9'b000010110
, 9'b001110000
, 9'b101010100
, 9'b101100001
, 9'b110000111
, 9'b001101001
, 9'b100010000
, 9'b011011101
, 9'b100010110
, 9'b110001000
, 9'b111100010
, 9'b111000010
, 9'b001000100
, 9'b110100001
, 9'b101111011
, 9'b111000110
, 9'b101001101
, 9'b111000001
, 9'b011000101
, 9'b011000010
, 9'b010000100
, 9'b110010100
, 9'b010001101
, 9'b110101011
, 9'b011010100
, 9'b001011011
, 9'b001100011
, 9'b111100100
, 9'b010111011
, 9'b001001100
, 9'b100011011
, 9'b110011101
, 9'b100011000
, 9'b011000101
, 9'b111000010
, 9'b100010101
, 9'b001101101
, 9'b101101001
, 9'b101001110
, 9'b001001110
, 9'b100110100
, 9'b111001000
, 9'b001001110
, 9'b001000001
, 9'b010000001
, 9'b011010010
, 9'b001101000
, 9'b111011100
, 9'b100000000
, 9'b111010100
, 9'b001111110
, 9'b110010000
, 9'b101110011
, 9'b100011001
, 9'b111111111
, 9'b100110011
, 9'b001010111
, 9'b010111011
, 9'b000001001
, 9'b101100000
, 9'b011101101
, 9'b010110101
, 9'b110000011
, 9'b000000110
, 9'b010000010
, 9'b010000101
, 9'b011110000
, 9'b111111010
, 9'b001111011
, 9'b101111100
, 9'b110001111
, 9'b111001100
, 9'b100001100
, 9'b111000110
, 9'b000101100
, 9'b101100110
, 9'b000000111
, 9'b100101101
, 9'b000000011
, 9'b111011101
, 9'b101000001
, 9'b001011101
, 9'b010011010
, 9'b010101100
, 9'b111101000
, 9'b100010011
, 9'b000001110
, 9'b011100110
, 9'b001011111
, 9'b011111110
, 9'b010000101
, 9'b111110000
};
logic [NUM_OF_LOGS-1:0] [8:0]  offset_y  = {
9'b111000111
, 9'b010111011
, 9'b011011000
, 9'b111110010
, 9'b100000010
, 9'b010001101
, 9'b010001100
, 9'b011110110
, 9'b000010111
, 9'b001000101
, 9'b001000010
, 9'b010100011
, 9'b100100100
, 9'b111100001
, 9'b101001010
, 9'b100000101
, 9'b110110001
, 9'b110011100
, 9'b011011110
, 9'b110111011
, 9'b101000110
, 9'b011111001
, 9'b100011001
, 9'b011100000
, 9'b100011100
, 9'b001010000
, 9'b101101010
, 9'b010111110
, 9'b001001111
, 9'b010010010
, 9'b101011010
, 9'b000110101
, 9'b010100101
, 9'b011010011
, 9'b101100101
, 9'b110011111
, 9'b000000111
, 9'b111111000
, 9'b001100110
, 9'b101000111
, 9'b110111100
, 9'b100001000
, 9'b101100000
, 9'b001010110
, 9'b010101011
, 9'b001101011
, 9'b101111101
, 9'b001010100
, 9'b000100101
, 9'b000001011
, 9'b110110100
, 9'b001010010
, 9'b110000000
, 9'b001001001
, 9'b010001010
, 9'b101000001
, 9'b011001111
, 9'b100010000
, 9'b111101010
, 9'b100110111
, 9'b101010010
, 9'b011011011
, 9'b111000011
, 9'b110110101
, 9'b101011010
, 9'b110001100
, 9'b011000001
, 9'b000000101
, 9'b001111000
, 9'b101000001
, 9'b111101011
, 9'b011010011
, 9'b000010000
, 9'b100111101
, 9'b001001011
, 9'b010100101
, 9'b101101100
, 9'b011001110
, 9'b010110101
, 9'b100001011
, 9'b101110100
, 9'b100001111
, 9'b110111110
, 9'b011010100
, 9'b011010001
, 9'b101001100
, 9'b000010111
, 9'b111011010
, 9'b110100111
, 9'b100000011
, 9'b110010101
, 9'b110010001
, 9'b110110010
, 9'b000011101
, 9'b011101000
, 9'b110101011
, 9'b000101001
, 9'b111010111
, 9'b011001011
, 9'b010111100
};

always_comb
begin
	for (int i = 0; i< NUM_OF_LOGS-1; i++) begin
		start_offsetX[i] = offset_x[i];
		start_offsetY[i] = offset_y[i];
	end
end
//
endmodule
//
